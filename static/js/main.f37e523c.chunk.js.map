{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","modes","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","textColor","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","split","length","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f37e523c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    let modes = props.mode==='light'?'Enable':'Disable';\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              {modes} Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const handleUpClick = () => {\r\n      const newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to upper case!\",\"success\")\r\n    }\r\n    const handleDownClick = () => {\r\n        const newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower case!\",\"success\")\r\n  }\r\n  const handleOnChange = (event) => {      \r\n      setText(event.target.value);\r\n  }\r\n  let textColor = props.mode==='light'?'black':'white';\r\n  return (\r\n    <div style={{color:textColor}}>\r\n      <div className=\"mb-3\" >\r\n        <h1>{props.heading}</h1>\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:textColor}} id=\"myBox\" rows=\"8\"></textarea>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n        <button className=\"btn btn-primary\" onClick={handleDownClick}>Convert to Lower Case</button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n          <h1>Your Text Summary</h1>\r\n          <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n          <p>{0.008 * (text.split(\" \").length)} minutes time read</p>\r\n          <h1>Text Preview</h1>\r\n          <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\" > */}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze\"\n                mode={mode}\n              />\n            {/* </Route>\n          </Switch> */}\n          {/* <About/> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}